document.addEventListener('DOMContentLoaded', function() {
  // –≠–ª–µ–º–µ–Ω—Ç—ã
  const mainScreen = document.getElementById('mainScreen');
  const startBtn = document.getElementById('startBtn');
  const registrationForm = document.getElementById('registrationForm');
  
  // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userData = {
    name: '',
    age: '',
    city: '',
    interests: [],
    moodColor: '#6C5CE7',
    avatar: null
  };
  
  let currentStep = 1;
  const totalSteps = 6;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  startBtn.addEventListener('click', startRegistration);
  
  function startRegistration() {
    mainScreen.classList.add('hidden');
    registrationForm.classList.remove('hidden');
    loadRegistrationForm();
  }
  
  function loadRegistrationForm() {
    registrationForm.innerHTML = `
      <div class="form-step active" data-step="1">
        <h2>–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</h2>
        <input type="text" class="input-field" id="userName" placeholder="–í–∞—à–µ –∏–º—è" required>
        <button class="btn next-step">–î–∞–ª–µ–µ</button>
      </div>
      
      <div class="form-step" data-step="2">
        <h2>–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?</h2>
        <input type="number" class="input-field" id="userAge" min="18" max="100" placeholder="–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç" required>
        <div class="navigation">
          <button class="btn prev-step">–ù–∞–∑–∞–¥</button>
          <button class="btn next-step">–î–∞–ª–µ–µ</button>
        </div>
      </div>
      
      <div class="form-step" data-step="3">
        <h2>–í–∞—à –≥–æ—Ä–æ–¥</h2>
        <input type="text" class="input-field" id="userCity" placeholder="–ì–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ?" required>
        <div class="navigation">
          <button class="btn prev-step">–ù–∞–∑–∞–¥</button>
          <button class="btn next-step">–î–∞–ª–µ–µ</button>
        </div>
      </div>
      
      <div class="form-step" data-step="4">
        <h2>–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è? (–≤—ã–±–µ—Ä–∏—Ç–µ 1-3)</h2>
        <div class="tags-container">
          <div class="tag" data-interest="music">üéµ –ú—É–∑—ã–∫–∞</div>
          <div class="tag" data-interest="sports">‚öΩ –°–ø–æ—Ä—Ç</div>
          <div class="tag" data-interest="books">üìö –ö–Ω–∏–≥–∏</div>
          <div class="tag" data-interest="travel">‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è</div>
          <div class="tag" data-interest="art">üé® –ò—Å–∫—É—Å—Å—Ç–≤–æ</div>
          <div class="tag" data-interest="games">üéÆ –ò–≥—Ä—ã</div>
        </div>
        <div class="navigation">
          <button class="btn prev-step">–ù–∞–∑–∞–¥</button>
          <button class="btn next-step">–î–∞–ª–µ–µ</button>
        </div>
      </div>
      
      <div class="form-step" data-step="5">
        <h2>–í–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç</h2>
        <div class="colors-container">
          <div class="color-option" style="background: #6C5CE7;" data-color="#6C5CE7"></div>
          <div class="color-option" style="background: #00B894;" data-color="#00B894"></div>
          <div class="color-option" style="background: #FD79A8;" data-color="#FD79A8"></div>
          <div class="color-option" style="background: #FDCB6E;" data-color="#FDCB6E"></div>
        </div>
        <div class="navigation">
          <button class="btn prev-step">–ù–∞–∑–∞–¥</button>
          <button class="btn next-step">–î–∞–ª–µ–µ</button>
        </div>
      </div>
      
      <div class="form-step" data-step="6">
        <h2>–í–∞—à–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è</h2>
        <div class="avatar-upload">
          <label class="btn">
            üì∏ –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ
            <input type="file" id="avatarUpload" accept="image/*" style="display: none;">
          </label>
          <div class="avatar-preview hidden" id="avatarPreview"></div>
        </div>
        <div class="navigation">
          <button class="btn prev-step">–ù–∞–∑–∞–¥</button>
          <button class="btn" id="completeBtn">–ó–∞–≤–µ—Ä—à–∏—Ç—å</button>
        </div>
      </div>
    `;
    
    initFormHandlers();
  }
  
  function initFormHandlers() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.querySelectorAll('.next-step').forEach(btn => {
      btn.addEventListener('click', goToNextStep);
    });
    
    document.querySelectorAll('.prev-step').forEach(btn => {
      btn.addEventListener('click', goToPrevStep);
    });
    
    // –ò–Ω—Ç–µ—Ä–µ—Å—ã
    document.querySelectorAll('.tag').forEach(tag => {
      tag.addEventListener('click', function() {
        if (this.classList.contains('selected')) {
          this.classList.remove('selected');
          userData.interests = userData.interests.filter(i => i !== this.dataset.interest);
        } else {
          if (userData.interests.length < 3) {
            this.classList.add('selected');
            userData.interests.push(this.dataset.interest);
          } else {
            alert('–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤');
          }
        }
      });
    });
    
    // –¶–≤–µ—Ç–∞
    document.querySelectorAll('.color-option').forEach(color => {
      color.addEventListener('click', function() {
        document.querySelectorAll('.color-option').forEach(c => c.classList.remove('selected'));
        this.classList.add('selected');
        userData.moodColor = this.dataset.color;
        document.documentElement.style.setProperty('--primary', this.dataset.color);
      });
    });
    
    // –ê–≤–∞—Ç–∞—Ä
    document.getElementById('avatarUpload')?.addEventListener('change', function(e) {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(event) {
          userData.avatar = event.target.result;
          const preview = document.getElementById('avatarPreview');
          preview.style.backgroundImage = `url(${event.target.result})`;
          preview.classList.remove('hidden');
        };
        reader.readAsDataURL(file);
      }
    });
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    document.getElementById('completeBtn')?.addEventListener('click', showProfile);
  }
  
  function goToNextStep() {
    if (!validateStep(currentStep)) return;
    saveStepData(currentStep);
    
    document.querySelector(`[data-step="${currentStep}"]`).classList.remove('active');
    currentStep++;
    document.querySelector(`[data-step="${currentStep}"]`).classList.add('active');
  }
  
  function goToPrevStep() {
    document.querySelector(`[data-step="${currentStep}"]`).classList.remove('active');
    currentStep--;
    document.querySelector(`[data-step="${currentStep}"]`).classList.add('active');
  }
  
  function validateStep(step) {
    switch(step) {
      case 1:
        if (!document.getElementById('userName').value.trim()) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
          return false;
        }
        return true;
      case 2:
        const age = parseInt(document.getElementById('userAge').value);
        if (isNaN(age) || age < 18 || age > 100) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (18-100)');
          return false;
        }
        return true;
      case 3:
        if (!document.getElementById('userCity').value.trim()) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥');
          return false;
        }
        return true;
      case 4:
        if (userData.interests.length === 0) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å');
          return false;
        }
        return true;
      case 5:
        if (!userData.moodColor) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç');
          return false;
        }
        return true;
      default:
        return true;
    }
  }
  
  function saveStepData(step) {
    switch(step) {
      case 1:
        userData.name = document.getElementById('userName').value.trim();
        break;
      case 2:
        userData.age = document.getElementById('userAge').value;
        break;
      case 3:
        userData.city = document.getElementById('userCity').value.trim();
        break;
    }
  }
  
  function showProfile() {
    if (!validateStep(currentStep)) return;
    saveStepData(currentStep);
    
    registrationForm.innerHTML = `
      <div class="profile-card">
        <div class="avatar-preview" style="background-image: url(${userData.avatar || 'https://i.imgur.com/JiZw5QK.png'});"></div>
        <h2 class="profile-name">${userData.name}</h2>
        <p class="profile-age">${userData.age} –ª–µ—Ç</p>
        <div class="profile-city">${userData.city}</div>
        
        <div class="profile-interests">
          ${userData.interests.map(interest => 
            `<div class="interest-tag">${getInterestEmoji(interest)} ${getInterestName(interest)}</div>`
          ).join('')}
        </div>
        
        <div class="profile-footer">
          –ì–æ—Ç–æ–≤–æ –∫ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º!
        </div>
      </div>
      
      <button class="btn" id="restartBtn">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å</button>
    `;
    
    document.getElementById('restartBtn').addEventListener('click', () => {
      location.reload();
    });
  }
  
  function getInterestEmoji(interest) {
    const emojis = {
      music: 'üéµ',
      sports: '‚öΩ',
      books: 'üìö',
      travel: '‚úàÔ∏è',
      art: 'üé®',
      games: 'üéÆ'
    };
    return emojis[interest] || '‚ù§Ô∏è';
  }
  
  function getInterestName(interest) {
    const names = {
      music: '–ú—É–∑—ã–∫–∞',
      sports: '–°–ø–æ—Ä—Ç',
      books: '–ö–Ω–∏–≥–∏',
      travel: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
      art: '–ò—Å–∫—É—Å—Å—Ç–≤–æ',
      games: '–ò–≥—Ä—ã'
    };
    return names[interest] || interest;
  }
});